openapi: 3.0.3

info:
    title: GenerativeService API
    description: |-
        API for using Large Models that generate multimodal content and have
         additional capabilities beyond text generation.
    version: "v1beta"

security:
  - ApiKeyAuth: []

servers:
    - url: https://generativelanguage.googleapis.com
paths:
    /v1beta/dynamic/{dynamic}:generateContent:
        post:
            tags:
                - GenerativeService
            description: Generates a model response for a dynamic model.
            operationId: GenerativeService_GenerateDynamicContent
            parameters:
                - name: dynamic
                  in: path
                  description: The dynamic id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateContentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateContentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/dynamic/{dynamic}:streamGenerateContent:
        post:
            tags:
                - GenerativeService
            description: Generates a streamed response from a dynamic model.
            operationId: GenerativeService_StreamGenerateDynamicContent
            parameters:
                - name: dynamic
                  in: path
                  description: The dynamic id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateContentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateContentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/models/{model}:batchEmbedContents:
        post:
            tags:
                - GenerativeService
            description: |-
                Generates multiple embedding vectors from the input `Content` which
                 consists of a batch of strings represented as `EmbedContentRequest`
                 objects.
            operationId: GenerativeService_BatchEmbedContents
            parameters:
                - name: model
                  in: path
                  description: The model id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchEmbedContentsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchEmbedContentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/models/{model}:countTokens:
        post:
            tags:
                - GenerativeService
            description: |-
                Runs a model's tokenizer on input `Content` and returns the token count.
                 Refer to the [tokens guide](https://ai.google.dev/gemini-api/docs/tokens)
                 to learn more about tokens.
            operationId: GenerativeService_CountTokens
            parameters:
                - name: model
                  in: path
                  description: The model id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CountTokensRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CountTokensResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/models/{model}:embedContent:
        post:
            tags:
                - GenerativeService
            description: |-
                Generates a text embedding vector from the input `Content` using the
                 specified [Gemini Embedding
                 model](https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding).
            operationId: GenerativeService_EmbedContent
            parameters:
                - name: model
                  in: path
                  description: The model id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmbedContentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/EmbedContentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/models/{model}:generateAnswer:
        post:
            tags:
                - GenerativeService
            description: |-
                Generates a grounded answer from the model given an input
                 `GenerateAnswerRequest`.
            operationId: GenerativeService_GenerateAnswer
            parameters:
                - name: model
                  in: path
                  description: The model id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateAnswerRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateAnswerResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/models/{model}:generateContent:
        post:
            tags:
                - GenerativeService
            description: Generates a model response for a standard model.
            operationId: GenerativeService_GenerateModelContent
            parameters:
                - name: model
                  in: path
                  description: The model id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateContentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateContentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/models/{model}:streamGenerateContent:
        post:
            tags:
                - GenerativeService
            description: Generates a streamed response from a standard model.
            operationId: GenerativeService_StreamGenerateModelContent
            parameters:
                - name: model
                  in: path
                  description: The model id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateContentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateContentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/tunedModels/{tunedModel}:generateContent:
        post:
            tags:
                - GenerativeService
            description: Generates a model response for a tuned model.
            operationId: GenerativeService_GenerateTunedModelContent
            parameters:
                - name: tunedModel
                  in: path
                  description: The tunedModel id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateContentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateContentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1beta/tunedModels/{tunedModel}:streamGenerateContent:
        post:
            tags:
                - GenerativeService
            description: Generates a streamed response from a tuned model.
            operationId: GenerativeService_StreamGenerateTunedModelContent
            parameters:
                - name: tunedModel
                  in: path
                  description: The tunedModel id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateContentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateContentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        AttributionSourceId:
            type: object
            properties:
                groundingPassage:
                    allOf:
                        - $ref: '#/components/schemas/AttributionSourceId_GroundingPassageId'
                    description: Identifier for an inline passage.
                semanticRetrieverChunk:
                    allOf:
                        - $ref: '#/components/schemas/AttributionSourceId_SemanticRetrieverChunk'
                    description: Identifier for a `Chunk` fetched via Semantic Retriever.
            description: Identifier for the source contributing to this attribution.
        AttributionSourceId_GroundingPassageId:
            type: object
            properties:
                passageId:
                    readOnly: true
                    type: string
                    description: |-
                        Output only. ID of the passage matching the `GenerateAnswerRequest`'s
                         `GroundingPassage.id`.
                partIndex:
                    readOnly: true
                    type: integer
                    description: |-
                        Output only. Index of the part within the `GenerateAnswerRequest`'s
                         `GroundingPassage.content`.
                    format: int32
            description: Identifier for a part within a `GroundingPassage`.
        AttributionSourceId_SemanticRetrieverChunk:
            type: object
            properties:
                source:
                    readOnly: true
                    type: string
                    description: |-
                        Output only. Name of the source matching the request's
                         `SemanticRetrieverConfig.source`. Example: `corpora/123` or
                         `corpora/123/documents/abc`
                chunk:
                    readOnly: true
                    type: string
                    description: |-
                        Output only. Name of the `Chunk` containing the attributed text.
                         Example: `corpora/123/documents/abc/chunks/xyz`
            description: |-
                Identifier for a `Chunk` retrieved via Semantic Retriever specified in the
                 `GenerateAnswerRequest` using `SemanticRetrieverConfig`.
        BatchEmbedContentsRequest:
            required:
                - model
                - requests
            type: object
            properties:
                model:
                    type: string
                    description: |-
                        Required. The model's resource name. This serves as an ID for the Model to
                         use.

                         This name should match a model name returned by the `ListModels` method.

                         Format: `models/{model}`
                requests:
                    type: array
                    items:
                        $ref: '#/components/schemas/EmbedContentRequest'
                    description: |-
                        Required. Embed requests for the batch. The model in each of these requests
                         must match the model specified `BatchEmbedContentsRequest.model`.
            description: Batch request to get embeddings from the model for a list of prompts.
        BatchEmbedContentsResponse:
            type: object
            properties:
                embeddings:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/ContentEmbedding'
                    description: |-
                        Output only. The embeddings for each request, in the same order as provided
                         in the batch request.
            description: The response to a `BatchEmbedContentsRequest`.
        Blob:
            type: object
            properties:
                mimeType:
                    type: string
                    description: |-
                        The IANA standard MIME type of the source data.
                         Examples:
                           - image/png
                           - image/jpeg
                         If an unsupported MIME type is provided, an error will be returned. For a
                         complete list of supported types, see [Supported file
                         formats](https://ai.google.dev/gemini-api/docs/prompting_with_media#supported_file_formats).
                data:
                    type: string
                    description: Raw bytes for media formats.
                    format: bytes
            description: |-
                Raw media bytes.

                 Text should not be sent as raw bytes, use the 'text' field.
        Candidate:
            type: object
            properties:
                index:
                    readOnly: true
                    type: integer
                    description: Output only. Index of the candidate in the list of response candidates.
                    format: int32
                content:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/Content'
                    description: Output only. Generated content returned from the model.
                finishReason:
                    readOnly: true
                    type: integer
                    description: |-
                        Optional. Output only. The reason why the model stopped generating tokens.

                         If empty, the model has not stopped generating tokens.
                    format: enum
                safetyRatings:
                    type: array
                    items:
                        $ref: '#/components/schemas/SafetyRating'
                    description: |-
                        List of ratings for the safety of a response candidate.

                         There is at most one rating per category.
                citationMetadata:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/CitationMetadata'
                    description: |-
                        Output only. Citation information for model-generated candidate.

                         This field may be populated with recitation information for any text
                         included in the `content`. These are passages that are "recited" from
                         copyrighted material in the foundational LLM's training data.
                tokenCount:
                    readOnly: true
                    type: integer
                    description: Output only. Token count for this candidate.
                    format: int32
                groundingAttributions:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/GroundingAttribution'
                    description: |-
                        Output only. Attribution information for sources that contributed to a
                         grounded answer.

                         This field is populated for `GenerateAnswer` calls.
                groundingMetadata:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/GroundingMetadata'
                    description: |-
                        Output only. Grounding metadata for the candidate.

                         This field is populated for `GenerateContent` calls.
                avgLogprobs:
                    readOnly: true
                    type: number
                    description: Output only. Average log probability score of the candidate.
                    format: double
                logprobsResult:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/LogprobsResult'
                    description: Output only. Log-likelihood scores for the response tokens and top tokens
                urlContextMetadata:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/UrlContextMetadata'
                    description: Output only. Metadata related to url context retrieval tool.
            description: A response candidate generated from the model.
        CitationMetadata:
            type: object
            properties:
                citationSources:
                    type: array
                    items:
                        $ref: '#/components/schemas/CitationSource'
                    description: Citations to sources for a specific response.
            description: A collection of source attributions for a piece of content.
        CitationSource:
            type: object
            properties:
                startIndex:
                    type: integer
                    description: |-
                        Optional. Start of segment of the response that is attributed to this
                         source.

                         Index indicates the start of the segment, measured in bytes.
                    format: int32
                endIndex:
                    type: integer
                    description: Optional. End of the attributed segment, exclusive.
                    format: int32
                uri:
                    type: string
                    description: Optional. URI that is attributed as a source for a portion of the text.
                license:
                    type: string
                    description: |-
                        Optional. License for the GitHub project that is attributed as a source for
                         segment.

                         License info is required for code citations.
            description: A citation to a source for a portion of a specific response.
        CodeExecution:
            type: object
            properties: {}
            description: |-
                Tool that executes code generated by the model, and automatically returns
                 the result to the model.

                 See also `ExecutableCode` and `CodeExecutionResult` which are only generated
                 when using this tool.
        CodeExecutionResult:
            required:
                - outcome
            type: object
            properties:
                outcome:
                    type: integer
                    description: Required. Outcome of the code execution.
                    format: enum
                output:
                    type: string
                    description: |-
                        Optional. Contains stdout when code execution is successful, stderr or
                         other description otherwise.
            description: |-
                Result of executing the `ExecutableCode`.

                 Only generated when using the `CodeExecution`, and always follows a `part`
                 containing the `ExecutableCode`.
        Condition:
            required:
                - operation
            type: object
            properties:
                stringValue:
                    type: string
                    description: The string value to filter the metadata on.
                numericValue:
                    type: number
                    description: The numeric value to filter the metadata on.
                    format: float
                operation:
                    type: integer
                    description: |-
                        Required. Operator applied to the given key-value pair to trigger the
                         condition.
                    format: enum
            description: Filter condition applicable to a single key.
        Content:
            type: object
            properties:
                parts:
                    type: array
                    items:
                        $ref: '#/components/schemas/Part'
                    description: |-
                        Ordered `Parts` that constitute a single message. Parts may have different
                         MIME types.
                role:
                    type: string
                    description: |-
                        Optional. The producer of the content. Must be either 'user' or 'model'.

                         Useful to set for multi-turn conversations, otherwise can be left blank
                         or unset.
            description: |-
                The base structured datatype containing multi-part content of a message.

                 A `Content` includes a `role` field designating the producer of the `Content`
                 and a `parts` field containing multi-part data that contains the content of
                 the message turn.
        ContentEmbedding:
            type: object
            properties:
                values:
                    type: array
                    items:
                        type: number
                        format: float
                    description: The embedding values.
            description: A list of floats representing an embedding.
        CountTokensRequest:
            required:
                - model
            type: object
            properties:
                model:
                    type: string
                    description: |-
                        Required. The model's resource name. This serves as an ID for the Model to
                         use.

                         This name should match a model name returned by the `ListModels` method.

                         Format: `models/{model}`
                contents:
                    type: array
                    items:
                        $ref: '#/components/schemas/Content'
                    description: |-
                        Optional. The input given to the model as a prompt. This field is ignored
                         when `generate_content_request` is set.
                generateContentRequest:
                    allOf:
                        - $ref: '#/components/schemas/GenerateContentRequest'
                    description: |-
                        Optional. The overall input given to the `Model`. This includes the prompt
                         as well as other model steering information like [system
                         instructions](https://ai.google.dev/gemini-api/docs/system-instructions),
                         and/or function declarations for [function
                         calling](https://ai.google.dev/gemini-api/docs/function-calling).
                         `Model`s/`Content`s and `generate_content_request`s are mutually
                         exclusive. You can either send `Model` + `Content`s or a
                         `generate_content_request`, but never both.
            description: |-
                Counts the number of tokens in the `prompt` sent to a model.

                 Models may tokenize text differently, so each model may return a different
                 `token_count`.
        CountTokensResponse:
            type: object
            properties:
                totalTokens:
                    type: integer
                    description: |-
                        The number of tokens that the `Model` tokenizes the `prompt` into. Always
                         non-negative.
                    format: int32
                cachedContentTokenCount:
                    type: integer
                    description: Number of tokens in the cached part of the prompt (the cached content).
                    format: int32
                promptTokensDetails:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/ModalityTokenCount'
                    description: Output only. List of modalities that were processed in the request input.
                cacheTokensDetails:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/ModalityTokenCount'
                    description: Output only. List of modalities that were processed in the cached content.
            description: |-
                A response from `CountTokens`.

                 It returns the model's `token_count` for the `prompt`.
        DynamicRetrievalConfig:
            type: object
            properties:
                mode:
                    type: integer
                    description: The mode of the predictor to be used in dynamic retrieval.
                    format: enum
                dynamicThreshold:
                    type: number
                    description: |-
                        The threshold to be used in dynamic retrieval.
                         If not set, a system default value is used.
                    format: float
            description: Describes the options to customize dynamic retrieval.
        EmbedContentRequest:
            required:
                - model
                - content
            type: object
            properties:
                model:
                    type: string
                    description: |-
                        Required. The model's resource name. This serves as an ID for the Model to
                         use.

                         This name should match a model name returned by the `ListModels` method.

                         Format: `models/{model}`
                content:
                    allOf:
                        - $ref: '#/components/schemas/Content'
                    description: |-
                        Required. The content to embed. Only the `parts.text` fields will be
                         counted.
                taskType:
                    type: integer
                    description: |-
                        Optional. Optional task type for which the embeddings will be used. Not
                         supported on earlier models (`models/embedding-001`).
                    format: enum
                title:
                    type: string
                    description: |-
                        Optional. An optional title for the text. Only applicable when TaskType is
                         `RETRIEVAL_DOCUMENT`.

                         Note: Specifying a `title` for `RETRIEVAL_DOCUMENT` provides better quality
                         embeddings for retrieval.
                outputDimensionality:
                    type: integer
                    description: |-
                        Optional. Optional reduced dimension for the output embedding. If set,
                         excessive values in the output embedding are truncated from the end.
                         Supported by newer models since 2024 only. You cannot set this value if
                         using the earlier model (`models/embedding-001`).
                    format: int32
            description: Request containing the `Content` for the model to embed.
        EmbedContentResponse:
            type: object
            properties:
                embedding:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/ContentEmbedding'
                    description: Output only. The embedding generated from the input content.
            description: The response to an `EmbedContentRequest`.
        ExecutableCode:
            required:
                - language
                - code
            type: object
            properties:
                language:
                    type: integer
                    description: Required. Programming language of the `code`.
                    format: enum
                code:
                    type: string
                    description: Required. The code to be executed.
            description: |-
                Code generated by the model that is meant to be executed, and the result
                 returned to the model.

                 Only generated when using the `CodeExecution` tool, in which the code will
                 be automatically executed, and a corresponding `CodeExecutionResult` will
                 also be generated.
        FileData:
            required:
                - fileUri
            type: object
            properties:
                mimeType:
                    type: string
                    description: Optional. The IANA standard MIME type of the source data.
                fileUri:
                    type: string
                    description: Required. URI.
            description: URI based data.
        FunctionCall:
            required:
                - name
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        Optional. The unique id of the function call. If populated, the client to
                         execute the `function_call` and return the response with the matching `id`.
                name:
                    type: string
                    description: |-
                        Required. The name of the function to call.
                         Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum
                         length of 63.
                args:
                    type: object
                    description: Optional. The function parameters and values in JSON object format.
            description: |-
                A predicted `FunctionCall` returned from the model that contains
                 a string representing the `FunctionDeclaration.name` with the
                 arguments and their values.
        FunctionCallingConfig:
            type: object
            properties:
                mode:
                    type: integer
                    description: |-
                        Optional. Specifies the mode in which function calling should execute. If
                         unspecified, the default value will be set to AUTO.
                    format: enum
                allowedFunctionNames:
                    type: array
                    items:
                        type: string
                    description: |-
                        Optional. A set of function names that, when provided, limits the functions
                         the model will call.

                         This should only be set when the Mode is ANY. Function names
                         should match [FunctionDeclaration.name]. With mode set to ANY, model will
                         predict a function call from the set of function names provided.
            description: Configuration for specifying function calling behavior.
        FunctionDeclaration:
            required:
                - name
                - description
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        Required. The name of the function.
                         Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum
                         length of 63.
                description:
                    type: string
                    description: Required. A brief description of the function.
                parameters:
                    allOf:
                        - $ref: '#/components/schemas/Schema'
                    description: |-
                        Optional. Describes the parameters to this function. Reflects the Open
                         API 3.03 Parameter Object string Key: the name of the parameter. Parameter
                         names are case sensitive. Schema Value: the Schema defining the type used
                         for the parameter.
                parametersJsonSchema:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufValue'
                    description: |-
                        Optional. Describes the parameters to the function in JSON Schema format.
                         The schema must describe an object where the properties are the parameters
                         to the function. For example:

                         ```
                         {
                           "type": "object",
                           "properties": {
                             "name": { "type": "string" },
                             "age": { "type": "integer" }
                           },
                           "additionalProperties": false,
                           "required": ["name", "age"],
                           "propertyOrdering": ["name", "age"]
                         }
                         ```

                         This field is mutually exclusive with `parameters`.
                response:
                    allOf:
                        - $ref: '#/components/schemas/Schema'
                    description: |-
                        Optional. Describes the output from this function in JSON Schema format.
                         Reflects the Open API 3.03 Response Object. The Schema defines the type
                         used for the response value of the function.
                responseJsonSchema:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufValue'
                    description: |-
                        Optional. Describes the output from this function in JSON Schema format.
                         The value specified by the schema is the response value of the function.

                         This field is mutually exclusive with `response`.
                behavior:
                    type: integer
                    description: |-
                        Optional. Specifies the function Behavior.
                         Currently only supported by the BidiGenerateContent method.
                    format: enum
            description: |-
                Structured representation of a function declaration as defined by the
                 [OpenAPI 3.03 specification](https://spec.openapis.org/oas/v3.0.3). Included
                 in this declaration are the function name and parameters. This
                 FunctionDeclaration is a representation of a block of code that can be used
                 as a `Tool` by the model and executed by the client.
        FunctionResponse:
            required:
                - name
                - response
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        Optional. The id of the function call this response is for. Populated by
                         the client to match the corresponding function call `id`.
                name:
                    type: string
                    description: |-
                        Required. The name of the function to call.
                         Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum
                         length of 63.
                response:
                    type: object
                    description: Required. The function response in JSON object format.
                willContinue:
                    type: boolean
                    description: |-
                        Optional. Signals that function call continues, and more responses will be
                         returned, turning the function call into a generator.
                         Is only applicable to NON_BLOCKING function calls, is ignored otherwise.
                         If set to false, future responses will not be considered.
                         It is allowed to return empty `response` with `will_continue=False` to
                         signal that the function call is finished. This may still trigger the model
                         generation. To avoid triggering the generation and finish the function
                         call, additionally set `scheduling` to `SILENT`.
                scheduling:
                    type: integer
                    description: |-
                        Optional. Specifies how the response should be scheduled in the
                         conversation. Only applicable to NON_BLOCKING function calls, is ignored
                         otherwise. Defaults to WHEN_IDLE.
                    format: enum
            description: |-
                The result output from a `FunctionCall` that contains a string
                 representing the `FunctionDeclaration.name` and a structured JSON
                 object containing any output from the function is used as context to
                 the model. This should contain the result of a`FunctionCall` made
                 based on model prediction.
        GenerateAnswerRequest:
            required:
                - model
                - contents
                - answerStyle
            type: object
            properties:
                inlinePassages:
                    allOf:
                        - $ref: '#/components/schemas/GroundingPassages'
                    description: Passages provided inline with the request.
                semanticRetriever:
                    allOf:
                        - $ref: '#/components/schemas/SemanticRetrieverConfig'
                    description: |-
                        Content retrieved from resources created via the Semantic Retriever
                         API.
                model:
                    type: string
                    description: |-
                        Required. The name of the `Model` to use for generating the grounded
                         response.

                         Format: `model=models/{model}`.
                contents:
                    type: array
                    items:
                        $ref: '#/components/schemas/Content'
                    description: |-
                        Required. The content of the current conversation with the `Model`. For
                         single-turn queries, this is a single question to answer. For multi-turn
                         queries, this is a repeated field that contains conversation history and
                         the last `Content` in the list containing the question.

                         Note: `GenerateAnswer` only supports queries in English.
                answerStyle:
                    type: integer
                    description: Required. Style in which answers should be returned.
                    format: enum
                safetySettings:
                    type: array
                    items:
                        $ref: '#/components/schemas/SafetySetting'
                    description: |-
                        Optional. A list of unique `SafetySetting` instances for blocking unsafe
                         content.

                         This will be enforced on the `GenerateAnswerRequest.contents` and
                         `GenerateAnswerResponse.candidate`. There should not be more than one
                         setting for each `SafetyCategory` type. The API will block any contents and
                         responses that fail to meet the thresholds set by these settings. This list
                         overrides the default settings for each `SafetyCategory` specified in the
                         safety_settings. If there is no `SafetySetting` for a given
                         `SafetyCategory` provided in the list, the API will use the default safety
                         setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH,
                         HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT,
                         HARM_CATEGORY_HARASSMENT are supported.
                         Refer to the
                         [guide](https://ai.google.dev/gemini-api/docs/safety-settings)
                         for detailed information on available safety settings. Also refer to the
                         [Safety guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to
                         learn how to incorporate safety considerations in your AI applications.
                temperature:
                    type: number
                    description: |-
                        Optional. Controls the randomness of the output.

                         Values can range from [0.0,1.0], inclusive. A value closer to 1.0 will
                         produce responses that are more varied and creative, while a value closer
                         to 0.0 will typically result in more straightforward responses from the
                         model. A low temperature (~0.2) is usually recommended for
                         Attributed-Question-Answering use cases.
                    format: float
            description: Request to generate a grounded answer from the `Model`.
        GenerateAnswerResponse:
            type: object
            properties:
                answer:
                    allOf:
                        - $ref: '#/components/schemas/Candidate'
                    description: |-
                        Candidate answer from the model.

                         Note: The model *always* attempts to provide a grounded answer, even when
                         the answer is unlikely to be answerable from the given passages.
                         In that case, a low-quality or ungrounded answer may be provided, along
                         with a low `answerable_probability`.
                answerableProbability:
                    readOnly: true
                    type: number
                    description: |-
                        Output only. The model's estimate of the probability that its answer is
                         correct and grounded in the input passages.

                         A low `answerable_probability` indicates that the answer might not be
                         grounded in the sources.

                         When `answerable_probability` is low, you may want to:

                         * Display a message to the effect of "We couldn’t answer that question" to
                         the user.
                         * Fall back to a general-purpose LLM that answers the question from world
                         knowledge. The threshold and nature of such fallbacks will depend on
                         individual use cases. `0.5` is a good starting threshold.
                    format: float
                inputFeedback:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/GenerateAnswerResponse_InputFeedback'
                    description: |-
                        Output only. Feedback related to the input data used to answer the
                         question, as opposed to the model-generated response to the question.

                         The input data can be one or more of the following:

                         - Question specified by the last entry in `GenerateAnswerRequest.content`
                         - Conversation history specified by the other entries in
                         `GenerateAnswerRequest.content`
                         - Grounding sources (`GenerateAnswerRequest.semantic_retriever` or
                         `GenerateAnswerRequest.inline_passages`)
            description: Response from the model for a grounded answer.
        GenerateAnswerResponse_InputFeedback:
            type: object
            properties:
                blockReason:
                    type: integer
                    description: |-
                        Optional. If set, the input was blocked and no candidates are returned.
                         Rephrase the input.
                    format: enum
                safetyRatings:
                    type: array
                    items:
                        $ref: '#/components/schemas/SafetyRating'
                    description: |-
                        Ratings for safety of the input.
                         There is at most one rating per category.
            description: |-
                Feedback related to the input data used to answer the question, as opposed
                 to the model-generated response to the question.
        GenerateContentRequest:
            required:
                - model
                - contents
            type: object
            properties:
                model:
                    type: string
                    description: |-
                        Required. The name of the `Model` to use for generating the completion.

                         Format: `models/{model}`.
                systemInstruction:
                    allOf:
                        - $ref: '#/components/schemas/Content'
                    description: |-
                        Optional. Developer set [system
                         instruction(s)](https://ai.google.dev/gemini-api/docs/system-instructions).
                         Currently, text only.
                contents:
                    type: array
                    items:
                        $ref: '#/components/schemas/Content'
                    description: |-
                        Required. The content of the current conversation with the model.

                         For single-turn queries, this is a single instance. For multi-turn queries
                         like [chat](https://ai.google.dev/gemini-api/docs/text-generation#chat),
                         this is a repeated field that contains the conversation history and the
                         latest request.
                tools:
                    type: array
                    items:
                        $ref: '#/components/schemas/Tool'
                    description: |-
                        Optional. A list of `Tools` the `Model` may use to generate the next
                         response.

                         A `Tool` is a piece of code that enables the system to interact with
                         external systems to perform an action, or set of actions, outside of
                         knowledge and scope of the `Model`. Supported `Tool`s are `Function` and
                         `code_execution`. Refer to the [Function
                         calling](https://ai.google.dev/gemini-api/docs/function-calling) and the
                         [Code execution](https://ai.google.dev/gemini-api/docs/code-execution)
                         guides to learn more.
                toolConfig:
                    allOf:
                        - $ref: '#/components/schemas/ToolConfig'
                    description: |-
                        Optional. Tool configuration for any `Tool` specified in the request. Refer
                         to the [Function calling
                         guide](https://ai.google.dev/gemini-api/docs/function-calling#function_calling_mode)
                         for a usage example.
                safetySettings:
                    type: array
                    items:
                        $ref: '#/components/schemas/SafetySetting'
                    description: |-
                        Optional. A list of unique `SafetySetting` instances for blocking unsafe
                         content.

                         This will be enforced on the `GenerateContentRequest.contents` and
                         `GenerateContentResponse.candidates`. There should not be more than one
                         setting for each `SafetyCategory` type. The API will block any contents and
                         responses that fail to meet the thresholds set by these settings. This list
                         overrides the default settings for each `SafetyCategory` specified in the
                         safety_settings. If there is no `SafetySetting` for a given
                         `SafetyCategory` provided in the list, the API will use the default safety
                         setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH,
                         HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT,
                         HARM_CATEGORY_HARASSMENT, HARM_CATEGORY_CIVIC_INTEGRITY are supported.
                         Refer to the [guide](https://ai.google.dev/gemini-api/docs/safety-settings)
                         for detailed information on available safety settings. Also refer to the
                         [Safety guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to
                         learn how to incorporate safety considerations in your AI applications.
                generationConfig:
                    allOf:
                        - $ref: '#/components/schemas/GenerationConfig'
                    description: Optional. Configuration options for model generation and outputs.
                cachedContent:
                    type: string
                    description: |-
                        Optional. The name of the content
                         [cached](https://ai.google.dev/gemini-api/docs/caching) to use as context
                         to serve the prediction. Format: `cachedContents/{cachedContent}`
            description: Request to generate a completion from the model.
        GenerateContentResponse:
            type: object
            properties:
                candidates:
                    type: array
                    items:
                        $ref: '#/components/schemas/Candidate'
                    description: Candidate responses from the model.
                promptFeedback:
                    allOf:
                        - $ref: '#/components/schemas/GenerateContentResponse_PromptFeedback'
                    description: Returns the prompt's feedback related to the content filters.
                usageMetadata:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/GenerateContentResponse_UsageMetadata'
                    description: Output only. Metadata on the generation requests' token usage.
                modelVersion:
                    readOnly: true
                    type: string
                    description: Output only. The model version used to generate the response.
                responseId:
                    readOnly: true
                    type: string
                    description: Output only. response_id is used to identify each response.
            description: |-
                Response from the model supporting multiple candidate responses.

                 Safety ratings and content filtering are reported for both
                 prompt in `GenerateContentResponse.prompt_feedback` and for each candidate
                 in `finish_reason` and in `safety_ratings`. The API:
                  - Returns either all requested candidates or none of them
                  - Returns no candidates at all only if there was something wrong with the
                    prompt (check `prompt_feedback`)
                  - Reports feedback on each candidate in `finish_reason` and
                    `safety_ratings`.
        GenerateContentResponse_PromptFeedback:
            type: object
            properties:
                blockReason:
                    type: integer
                    description: |-
                        Optional. If set, the prompt was blocked and no candidates are returned.
                         Rephrase the prompt.
                    format: enum
                safetyRatings:
                    type: array
                    items:
                        $ref: '#/components/schemas/SafetyRating'
                    description: |-
                        Ratings for safety of the prompt.
                         There is at most one rating per category.
            description: |-
                A set of the feedback metadata the prompt specified in
                 `GenerateContentRequest.content`.
        GenerateContentResponse_UsageMetadata:
            type: object
            properties:
                promptTokenCount:
                    type: integer
                    description: |-
                        Number of tokens in the prompt. When `cached_content` is set, this is
                         still the total effective prompt size meaning this includes the number of
                         tokens in the cached content.
                    format: int32
                cachedContentTokenCount:
                    type: integer
                    description: Number of tokens in the cached part of the prompt (the cached content)
                    format: int32
                candidatesTokenCount:
                    type: integer
                    description: Total number of tokens across all the generated response candidates.
                    format: int32
                toolUsePromptTokenCount:
                    readOnly: true
                    type: integer
                    description: Output only. Number of tokens present in tool-use prompt(s).
                    format: int32
                thoughtsTokenCount:
                    readOnly: true
                    type: integer
                    description: Output only. Number of tokens of thoughts for thinking models.
                    format: int32
                totalTokenCount:
                    type: integer
                    description: |-
                        Total token count for the generation request (prompt + response
                         candidates).
                    format: int32
                promptTokensDetails:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/ModalityTokenCount'
                    description: Output only. List of modalities that were processed in the request input.
                cacheTokensDetails:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/ModalityTokenCount'
                    description: |-
                        Output only. List of modalities of the cached content in the request
                         input.
                candidatesTokensDetails:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/ModalityTokenCount'
                    description: Output only. List of modalities that were returned in the response.
                toolUsePromptTokensDetails:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/ModalityTokenCount'
                    description: |-
                        Output only. List of modalities that were processed for tool-use request
                         inputs.
            description: Metadata on the generation request's token usage.
        GenerationConfig:
            type: object
            properties:
                candidateCount:
                    type: integer
                    description: |-
                        Optional. Number of generated responses to return. If unset, this will
                         default to 1. Please note that this doesn't work for previous generation
                         models (Gemini 1.0 family)
                    format: int32
                stopSequences:
                    type: array
                    items:
                        type: string
                    description: |-
                        Optional. The set of character sequences (up to 5) that will stop output
                         generation. If specified, the API will stop at the first appearance of a
                         `stop_sequence`. The stop sequence will not be included as part of the
                         response.
                maxOutputTokens:
                    type: integer
                    description: |-
                        Optional. The maximum number of tokens to include in a response candidate.

                         Note: The default value varies by model, see the `Model.output_token_limit`
                         attribute of the `Model` returned from the `getModel` function.
                    format: int32
                temperature:
                    type: number
                    description: |-
                        Optional. Controls the randomness of the output.

                         Note: The default value varies by model, see the `Model.temperature`
                         attribute of the `Model` returned from the `getModel` function.

                         Values can range from [0.0, 2.0].
                    format: float
                topP:
                    type: number
                    description: |-
                        Optional. The maximum cumulative probability of tokens to consider when
                         sampling.

                         The model uses combined Top-k and Top-p (nucleus) sampling.

                         Tokens are sorted based on their assigned probabilities so that only the
                         most likely tokens are considered. Top-k sampling directly limits the
                         maximum number of tokens to consider, while Nucleus sampling limits the
                         number of tokens based on the cumulative probability.

                         Note: The default value varies by `Model` and is specified by
                         the`Model.top_p` attribute returned from the `getModel` function. An empty
                         `top_k` attribute indicates that the model doesn't apply top-k sampling
                         and doesn't allow setting `top_k` on requests.
                    format: float
                topK:
                    type: integer
                    description: |-
                        Optional. The maximum number of tokens to consider when sampling.

                         Gemini models use Top-p (nucleus) sampling or a combination of Top-k and
                         nucleus sampling. Top-k sampling considers the set of `top_k` most probable
                         tokens. Models running with nucleus sampling don't allow top_k setting.

                         Note: The default value varies by `Model` and is specified by
                         the`Model.top_p` attribute returned from the `getModel` function. An empty
                         `top_k` attribute indicates that the model doesn't apply top-k sampling
                         and doesn't allow setting `top_k` on requests.
                    format: int32
                seed:
                    type: integer
                    description: |-
                        Optional. Seed used in decoding. If not set, the request uses a randomly
                         generated seed.
                    format: int32
                responseMimeType:
                    type: string
                    description: |-
                        Optional. MIME type of the generated candidate text.
                         Supported MIME types are:
                         `text/plain`: (default) Text output.
                         `application/json`: JSON response in the response candidates.
                         `text/x.enum`: ENUM as a string response in the response candidates.
                         Refer to the
                         [docs](https://ai.google.dev/gemini-api/docs/prompting_with_media#plain_text_formats)
                         for a list of all supported text MIME types.
                responseSchema:
                    allOf:
                        - $ref: '#/components/schemas/Schema'
                    description: |-
                        Optional. Output schema of the generated candidate text. Schemas must be a
                         subset of the [OpenAPI schema](https://spec.openapis.org/oas/v3.0.3#schema)
                         and can be objects, primitives or arrays.

                         If set, a compatible `response_mime_type` must also be set.
                         Compatible MIME types:
                         `application/json`: Schema for JSON response.
                         Refer to the [JSON text generation
                         guide](https://ai.google.dev/gemini-api/docs/json-mode) for more details.
                responseJsonSchema:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufValue'
                    description: |-
                        Optional. Output schema of the generated response. This is an alternative
                         to `response_schema` that accepts [JSON Schema](https://json-schema.org/).

                         If set, `response_schema` must be omitted, but `response_mime_type` is
                         required.

                         While the full JSON Schema may be sent, not all features are supported.
                         Specifically, only the following properties are supported:

                         - `$id`
                         - `$defs`
                         - `$ref`
                         - `$anchor`
                         - `type`
                         - `format`
                         - `title`
                         - `description`
                         - `enum` (for strings and numbers)
                         - `items`
                         - `prefixItems`
                         - `minItems`
                         - `maxItems`
                         - `minimum`
                         - `maximum`
                         - `anyOf`
                         - `oneOf` (interpreted the same as `anyOf`)
                         - `properties`
                         - `additionalProperties`
                         - `required`

                         The non-standard `propertyOrdering` property may also be set.

                         Cyclic references are unrolled to a limited degree and, as such, may only
                         be used within non-required properties. (Nullable properties are not
                         sufficient.) If `$ref` is set on a sub-schema, no other properties, except
                         for than those starting as a `$`, may be set.
                presencePenalty:
                    type: number
                    description: |-
                        Optional. Presence penalty applied to the next token's logprobs if the
                         token has already been seen in the response.

                         This penalty is binary on/off and not dependant on the number of times the
                         token is used (after the first). Use
                         [frequency_penalty][google.ai.generativelanguage.v1beta.GenerationConfig.frequency_penalty]
                         for a penalty that increases with each use.

                         A positive penalty will discourage the use of tokens that have already
                         been used in the response, increasing the vocabulary.

                         A negative penalty will encourage the use of tokens that have already been
                         used in the response, decreasing the vocabulary.
                    format: float
                frequencyPenalty:
                    type: number
                    description: |-
                        Optional. Frequency penalty applied to the next token's logprobs,
                         multiplied by the number of times each token has been seen in the respponse
                         so far.

                         A positive penalty will discourage the use of tokens that have already
                         been used, proportional to the number of times the token has been used:
                         The more a token is used, the more difficult it is for the model to use
                         that token again increasing the vocabulary of responses.

                         Caution: A _negative_ penalty will encourage the model to reuse tokens
                         proportional to the number of times the token has been used. Small
                         negative values will reduce the vocabulary of a response. Larger negative
                         values will cause the model to start repeating a common token  until it
                         hits the
                         [max_output_tokens][google.ai.generativelanguage.v1beta.GenerationConfig.max_output_tokens]
                         limit.
                    format: float
                responseLogprobs:
                    type: boolean
                    description: Optional. If true, export the logprobs results in response.
                logprobs:
                    type: integer
                    description: |-
                        Optional. Only valid if
                         [response_logprobs=True][google.ai.generativelanguage.v1beta.GenerationConfig.response_logprobs].
                         This sets the number of top logprobs to return at each decoding step in the
                         [Candidate.logprobs_result][google.ai.generativelanguage.v1beta.Candidate.logprobs_result].
                    format: int32
                enableEnhancedCivicAnswers:
                    type: boolean
                    description: |-
                        Optional. Enables enhanced civic answers. It may not be available for all
                         models.
                responseModalities:
                    type: array
                    items:
                        type: integer
                        format: enum
                    description: |-
                        Optional. The requested modalities of the response. Represents the set of
                         modalities that the model can return, and should be expected in the
                         response. This is an exact match to the modalities of the response.

                         A model may have multiple combinations of supported modalities. If the
                         requested modalities do not match any of the supported combinations, an
                         error will be returned.

                         An empty list is equivalent to requesting only text.
                speechConfig:
                    allOf:
                        - $ref: '#/components/schemas/SpeechConfig'
                    description: Optional. The speech generation config.
                thinkingConfig:
                    allOf:
                        - $ref: '#/components/schemas/ThinkingConfig'
                    description: |-
                        Optional. Config for thinking features.
                         An error will be returned if this field is set for models that don't
                         support thinking.
                mediaResolution:
                    type: integer
                    description: Optional. If specified, the media resolution specified will be used.
                    format: enum
            description: |-
                Configuration options for model generation and outputs. Not all parameters
                 are configurable for every model.
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        GoogleProtobufValue:
            description: Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
        GoogleSearchRetrieval:
            type: object
            properties:
                dynamicRetrievalConfig:
                    allOf:
                        - $ref: '#/components/schemas/DynamicRetrievalConfig'
                    description: Specifies the dynamic retrieval configuration for the given source.
            description: Tool to retrieve public web data for grounding, powered by Google.
        GroundingAttribution:
            type: object
            properties:
                sourceId:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/AttributionSourceId'
                    description: Output only. Identifier for the source contributing to this attribution.
                content:
                    allOf:
                        - $ref: '#/components/schemas/Content'
                    description: Grounding source content that makes up this attribution.
            description: Attribution for a source that contributed to an answer.
        GroundingChunk:
            type: object
            properties:
                web:
                    allOf:
                        - $ref: '#/components/schemas/GroundingChunk_Web'
                    description: Grounding chunk from the web.
            description: Grounding chunk.
        GroundingChunk_Web:
            type: object
            properties:
                uri:
                    type: string
                    description: URI reference of the chunk.
                title:
                    type: string
                    description: Title of the chunk.
            description: Chunk from the web.
        GroundingMetadata:
            type: object
            properties:
                searchEntryPoint:
                    allOf:
                        - $ref: '#/components/schemas/SearchEntryPoint'
                    description: Optional. Google search entry for the following-up web searches.
                groundingChunks:
                    type: array
                    items:
                        $ref: '#/components/schemas/GroundingChunk'
                    description: List of supporting references retrieved from specified grounding source.
                groundingSupports:
                    type: array
                    items:
                        $ref: '#/components/schemas/GroundingSupport'
                    description: List of grounding support.
                retrievalMetadata:
                    allOf:
                        - $ref: '#/components/schemas/RetrievalMetadata'
                    description: Metadata related to retrieval in the grounding flow.
                webSearchQueries:
                    type: array
                    items:
                        type: string
                    description: Web search queries for the following-up web search.
            description: Metadata returned to client when grounding is enabled.
        GroundingPassage:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        Identifier for the passage for attributing this passage in grounded
                         answers.
                content:
                    allOf:
                        - $ref: '#/components/schemas/Content'
                    description: Content of the passage.
            description: Passage included inline with a grounding configuration.
        GroundingPassages:
            type: object
            properties:
                passages:
                    type: array
                    items:
                        $ref: '#/components/schemas/GroundingPassage'
                    description: List of passages.
            description: A repeated list of passages.
        GroundingSupport:
            type: object
            properties:
                segment:
                    allOf:
                        - $ref: '#/components/schemas/Segment'
                    description: Segment of the content this support belongs to.
                groundingChunkIndices:
                    type: array
                    items:
                        type: integer
                        format: int32
                    description: |-
                        A list of indices (into 'grounding_chunk') specifying the
                         citations associated with the claim. For instance [1,3,4] means
                         that grounding_chunk[1], grounding_chunk[3],
                         grounding_chunk[4] are the retrieved content attributed to the claim.
                confidenceScores:
                    type: array
                    items:
                        type: number
                        format: float
                    description: |-
                        Confidence score of the support references. Ranges from 0 to 1. 1 is the
                         most confident. This list must have the same size as the
                         grounding_chunk_indices.
            description: Grounding support.
        Interval:
            type: object
            properties:
                startTime:
                    type: string
                    description: |-
                        Optional. Inclusive start of the interval.

                         If specified, a Timestamp matching this interval will have to be the same
                         or after the start.
                    format: date-time
                endTime:
                    type: string
                    description: |-
                        Optional. Exclusive end of the interval.

                         If specified, a Timestamp matching this interval will have to be before the
                         end.
                    format: date-time
            description: |-
                Represents a time interval, encoded as a Timestamp start (inclusive) and a
                 Timestamp end (exclusive).

                 The start must be less than or equal to the end.
                 When the start equals the end, the interval is empty (matches no time).
                 When both start and end are unspecified, the interval matches any time.
        LogprobsResult:
            type: object
            properties:
                topCandidates:
                    type: array
                    items:
                        $ref: '#/components/schemas/LogprobsResult_TopCandidates'
                    description: Length = total number of decoding steps.
                chosenCandidates:
                    type: array
                    items:
                        $ref: '#/components/schemas/LogprobsResult_Candidate'
                    description: |-
                        Length = total number of decoding steps.
                         The chosen candidates may or may not be in top_candidates.
            description: Logprobs Result
        LogprobsResult_Candidate:
            type: object
            properties:
                token:
                    type: string
                    description: The candidate’s token string value.
                tokenId:
                    type: integer
                    description: The candidate’s token id value.
                    format: int32
                logProbability:
                    type: number
                    description: The candidate's log probability.
                    format: float
            description: Candidate for the logprobs token and score.
        LogprobsResult_TopCandidates:
            type: object
            properties:
                candidates:
                    type: array
                    items:
                        $ref: '#/components/schemas/LogprobsResult_Candidate'
                    description: Sorted by log probability in descending order.
            description: Candidates with top log probabilities at each decoding step.
        MetadataFilter:
            required:
                - key
                - conditions
            type: object
            properties:
                key:
                    type: string
                    description: Required. The key of the metadata to filter on.
                conditions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Condition'
                    description: |-
                        Required. The `Condition`s for the given key that will trigger this filter.
                         Multiple `Condition`s are joined by logical ORs.
            description: |-
                User provided filter to limit retrieval based on `Chunk` or `Document` level
                 metadata values.
                 Example (genre = drama OR genre = action):
                   key = "document.custom_metadata.genre"
                   conditions = [{string_value = "drama", operation = EQUAL},
                                 {string_value = "action", operation = EQUAL}]
        ModalityTokenCount:
            type: object
            properties:
                modality:
                    type: integer
                    description: The modality associated with this token count.
                    format: enum
                tokenCount:
                    type: integer
                    description: Number of tokens.
                    format: int32
            description: Represents token counting info for a single modality.
        MultiSpeakerVoiceConfig:
            required:
                - speakerVoiceConfigs
            type: object
            properties:
                speakerVoiceConfigs:
                    type: array
                    items:
                        $ref: '#/components/schemas/SpeakerVoiceConfig'
                    description: Required. All the enabled speaker voices.
            description: The configuration for the multi-speaker setup.
        Part:
            type: object
            properties:
                text:
                    type: string
                    description: Inline text.
                inlineData:
                    allOf:
                        - $ref: '#/components/schemas/Blob'
                    description: Inline media bytes.
                functionCall:
                    allOf:
                        - $ref: '#/components/schemas/FunctionCall'
                    description: |-
                        A predicted `FunctionCall` returned from the model that contains
                         a string representing the `FunctionDeclaration.name` with the
                         arguments and their values.
                functionResponse:
                    allOf:
                        - $ref: '#/components/schemas/FunctionResponse'
                    description: |-
                        The result output of a `FunctionCall` that contains a string
                         representing the `FunctionDeclaration.name` and a structured JSON
                         object containing any output from the function is used as context to
                         the model.
                fileData:
                    allOf:
                        - $ref: '#/components/schemas/FileData'
                    description: URI based data.
                executableCode:
                    allOf:
                        - $ref: '#/components/schemas/ExecutableCode'
                    description: Code generated by the model that is meant to be executed.
                codeExecutionResult:
                    allOf:
                        - $ref: '#/components/schemas/CodeExecutionResult'
                    description: Result of executing the `ExecutableCode`.
                videoMetadata:
                    allOf:
                        - $ref: '#/components/schemas/VideoMetadata'
                    description: |-
                        Optional. Video metadata. The metadata should only be specified while the
                         video data is presented in inline_data or file_data.
                thought:
                    type: boolean
                    description: Optional. Indicates if the part is thought from the model.
                thoughtSignature:
                    type: string
                    description: |-
                        Optional. An opaque signature for the thought so it can be reused in
                         subsequent requests.
                    format: bytes
            description: |-
                A datatype containing media that is part of a multi-part `Content` message.

                 A `Part` consists of data which has an associated datatype. A `Part` can only
                 contain one of the accepted types in `Part.data`.

                 A `Part` must have a fixed IANA MIME type identifying the type and subtype
                 of the media if the `inline_data` field is filled with raw bytes.
        PrebuiltVoiceConfig:
            type: object
            properties:
                voiceName:
                    type: string
                    description: The name of the preset voice to use.
            description: The configuration for the prebuilt speaker to use.
        RetrievalMetadata:
            type: object
            properties:
                googleSearchDynamicRetrievalScore:
                    type: number
                    description: |-
                        Optional. Score indicating how likely information from google search could
                         help answer the prompt. The score is in the range [0, 1], where 0 is the
                         least likely and 1 is the most likely. This score is only populated when
                         google search grounding and dynamic retrieval is enabled. It will be
                         compared to the threshold to determine whether to trigger google search.
                    format: float
            description: Metadata related to retrieval in the grounding flow.
        SafetyRating:
            required:
                - category
                - probability
            type: object
            properties:
                category:
                    type: integer
                    description: Required. The category for this rating.
                    format: enum
                probability:
                    type: integer
                    description: Required. The probability of harm for this content.
                    format: enum
                blocked:
                    type: boolean
                    description: Was this content blocked because of this rating?
            description: |-
                Safety rating for a piece of content.

                 The safety rating contains the category of harm and the
                 harm probability level in that category for a piece of content.
                 Content is classified for safety across a number of
                 harm categories and the probability of the harm classification is included
                 here.
        SafetySetting:
            required:
                - category
                - threshold
            type: object
            properties:
                category:
                    type: integer
                    description: Required. The category for this setting.
                    format: enum
                threshold:
                    type: integer
                    description: Required. Controls the probability threshold at which harm is blocked.
                    format: enum
            description: |-
                Safety setting, affecting the safety-blocking behavior.

                 Passing a safety setting for a category changes the allowed probability that
                 content is blocked.
        Schema:
            required:
                - type
            type: object
            properties:
                type:
                    type: integer
                    description: Required. Data type.
                    format: enum
                format:
                    type: string
                    description: |-
                        Optional. The format of the data. This is used only for primitive
                         datatypes. Supported formats:
                          for NUMBER type: float, double
                          for INTEGER type: int32, int64
                          for STRING type: enum, date-time
                title:
                    type: string
                    description: Optional. The title of the schema.
                description:
                    type: string
                    description: |-
                        Optional. A brief description of the parameter. This could contain examples
                         of use. Parameter description may be formatted as Markdown.
                nullable:
                    type: boolean
                    description: Optional. Indicates if the value may be null.
                enum:
                    type: array
                    items:
                        type: string
                    description: |-
                        Optional. Possible values of the element of Type.STRING with enum format.
                         For example we can define an Enum Direction as :
                         {type:STRING, format:enum, enum:["EAST", NORTH", "SOUTH", "WEST"]}
                items:
                    allOf:
                        - $ref: '#/components/schemas/Schema'
                    description: Optional. Schema of the elements of Type.ARRAY.
                maxItems:
                    type: string
                    description: Optional. Maximum number of the elements for Type.ARRAY.
                minItems:
                    type: string
                    description: Optional. Minimum number of the elements for Type.ARRAY.
                properties:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Schema'
                    description: Optional. Properties of Type.OBJECT.
                required:
                    type: array
                    items:
                        type: string
                    description: Optional. Required properties of Type.OBJECT.
                minProperties:
                    type: string
                    description: Optional. Minimum number of the properties for Type.OBJECT.
                maxProperties:
                    type: string
                    description: Optional. Maximum number of the properties for Type.OBJECT.
                minimum:
                    type: number
                    description: |-
                        Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER
                         Minimum value of the Type.INTEGER and Type.NUMBER
                    format: double
                maximum:
                    type: number
                    description: Optional. Maximum value of the Type.INTEGER and Type.NUMBER
                    format: double
                minLength:
                    type: string
                    description: |-
                        Optional. SCHEMA FIELDS FOR TYPE STRING
                         Minimum length of the Type.STRING
                maxLength:
                    type: string
                    description: Optional. Maximum length of the Type.STRING
                pattern:
                    type: string
                    description: |-
                        Optional. Pattern of the Type.STRING to restrict a string to a regular
                         expression.
                example:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufValue'
                    description: |-
                        Optional. Example of the object. Will only populated when the object is the
                         root.
                anyOf:
                    type: array
                    items:
                        $ref: '#/components/schemas/Schema'
                    description: |-
                        Optional. The value should be validated against any (one or more) of the
                         subschemas in the list.
                propertyOrdering:
                    type: array
                    items:
                        type: string
                    description: |-
                        Optional. The order of the properties.
                         Not a standard field in open api spec. Used to determine the order of the
                         properties in the response.
                default:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufValue'
                    description: |-
                        Optional. Default value of the field. Per JSON Schema, this field is
                         intended for documentation generators and doesn't affect validation. Thus
                         it's included here and ignored so that developers who send schemas with a
                         `default` field don't get unknown-field errors.
            description: |-
                The `Schema` object allows the definition of input and output data types.
                 These types can be objects, but also primitives and arrays.
                 Represents a select subset of an [OpenAPI 3.0 schema
                 object](https://spec.openapis.org/oas/v3.0.3#schema).
        SearchEntryPoint:
            type: object
            properties:
                renderedContent:
                    type: string
                    description: |-
                        Optional. Web content snippet that can be embedded in a web page or an app
                         webview.
                sdkBlob:
                    type: string
                    description: |-
                        Optional. Base64 encoded JSON representing array of <search term, search
                         url> tuple.
                    format: bytes
            description: Google search entry point.
        Segment:
            type: object
            properties:
                partIndex:
                    readOnly: true
                    type: integer
                    description: Output only. The index of a Part object within its parent Content object.
                    format: int32
                startIndex:
                    readOnly: true
                    type: integer
                    description: |-
                        Output only. Start index in the given Part, measured in bytes. Offset from
                         the start of the Part, inclusive, starting at zero.
                    format: int32
                endIndex:
                    readOnly: true
                    type: integer
                    description: |-
                        Output only. End index in the given Part, measured in bytes. Offset from
                         the start of the Part, exclusive, starting at zero.
                    format: int32
                text:
                    readOnly: true
                    type: string
                    description: Output only. The text corresponding to the segment from the response.
            description: Segment of the content.
        SemanticRetrieverConfig:
            required:
                - source
                - query
            type: object
            properties:
                source:
                    type: string
                    description: |-
                        Required. Name of the resource for retrieval. Example: `corpora/123` or
                         `corpora/123/documents/abc`.
                query:
                    allOf:
                        - $ref: '#/components/schemas/Content'
                    description: |-
                        Required. Query to use for matching `Chunk`s in the given resource by
                         similarity.
                metadataFilters:
                    type: array
                    items:
                        $ref: '#/components/schemas/MetadataFilter'
                    description: |-
                        Optional. Filters for selecting `Document`s and/or `Chunk`s from the
                         resource.
                maxChunksCount:
                    type: integer
                    description: Optional. Maximum number of relevant `Chunk`s to retrieve.
                    format: int32
                minimumRelevanceScore:
                    type: number
                    description: Optional. Minimum relevance score for retrieved relevant `Chunk`s.
                    format: float
            description: |-
                Configuration for retrieving grounding content from a `Corpus` or
                 `Document` created using the Semantic Retriever API.
        SpeakerVoiceConfig:
            required:
                - speaker
                - voiceConfig
            type: object
            properties:
                speaker:
                    type: string
                    description: |-
                        Required. The name of the speaker to use. Should be the same as in the
                         prompt.
                voiceConfig:
                    allOf:
                        - $ref: '#/components/schemas/VoiceConfig'
                    description: Required. The configuration for the voice to use.
            description: The configuration for a single speaker in a multi speaker setup.
        SpeechConfig:
            type: object
            properties:
                voiceConfig:
                    allOf:
                        - $ref: '#/components/schemas/VoiceConfig'
                    description: The configuration in case of single-voice output.
                multiSpeakerVoiceConfig:
                    allOf:
                        - $ref: '#/components/schemas/MultiSpeakerVoiceConfig'
                    description: |-
                        Optional. The configuration for the multi-speaker setup.
                         It is mutually exclusive with the voice_config field.
                languageCode:
                    type: string
                    description: |-
                        Optional. Language code (in BCP 47 format, e.g. "en-US") for speech
                         synthesis.

                         Valid values are: de-DE, en-AU, en-GB, en-IN, en-US, es-US, fr-FR, hi-IN,
                         pt-BR, ar-XA, es-ES, fr-CA, id-ID, it-IT, ja-JP, tr-TR, vi-VN, bn-IN,
                         gu-IN, kn-IN, ml-IN, mr-IN, ta-IN, te-IN, nl-NL, ko-KR, cmn-CN, pl-PL,
                         ru-RU, and th-TH.
            description: The speech generation config.
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        ThinkingConfig:
            type: object
            properties:
                includeThoughts:
                    type: boolean
                    description: |-
                        Indicates whether to include thoughts in the response.
                         If true, thoughts are returned only when available.
                thinkingBudget:
                    type: integer
                    description: The number of thoughts tokens that the model should generate.
                    format: int32
            description: Config for thinking features.
        Tool:
            type: object
            properties:
                functionDeclarations:
                    type: array
                    items:
                        $ref: '#/components/schemas/FunctionDeclaration'
                    description: |-
                        Optional. A list of `FunctionDeclarations` available to the model that can
                         be used for function calling.

                         The model or system does not execute the function. Instead the defined
                         function may be returned as a
                         [FunctionCall][google.ai.generativelanguage.v1beta.Part.function_call] with
                         arguments to the client side for execution. The model may decide to call a
                         subset of these functions by populating
                         [FunctionCall][google.ai.generativelanguage.v1beta.Part.function_call] in
                         the response. The next conversation turn may contain a
                         [FunctionResponse][google.ai.generativelanguage.v1beta.Part.function_response]
                         with the [Content.role][google.ai.generativelanguage.v1beta.Content.role]
                         "function" generation context for the next model turn.
                googleSearchRetrieval:
                    allOf:
                        - $ref: '#/components/schemas/GoogleSearchRetrieval'
                    description: Optional. Retrieval tool that is powered by Google search.
                codeExecution:
                    allOf:
                        - $ref: '#/components/schemas/CodeExecution'
                    description: Optional. Enables the model to execute code as part of generation.
                googleSearch:
                    allOf:
                        - $ref: '#/components/schemas/Tool_GoogleSearch'
                    description: |-
                        Optional. GoogleSearch tool type.
                         Tool to support Google Search in Model. Powered by Google.
                urlContext:
                    allOf:
                        - $ref: '#/components/schemas/UrlContext'
                    description: Optional. Tool to support URL context retrieval.
            description: |-
                Tool details that the model may use to generate response.

                 A `Tool` is a piece of code that enables the system to interact with
                 external systems to perform an action, or set of actions, outside of
                 knowledge and scope of the model.
        ToolConfig:
            type: object
            properties:
                functionCallingConfig:
                    allOf:
                        - $ref: '#/components/schemas/FunctionCallingConfig'
                    description: Optional. Function calling config.
            description: |-
                The Tool configuration containing parameters for specifying `Tool` use
                 in the request.
        Tool_GoogleSearch:
            type: object
            properties:
                timeRangeFilter:
                    allOf:
                        - $ref: '#/components/schemas/Interval'
                    description: |-
                        Optional. Filter search results to a specific time range.
                         If customers set a start time, they must set an end time (and vice
                         versa).
            description: |-
                GoogleSearch tool type.
                 Tool to support Google Search in Model. Powered by Google.
        UrlContext:
            type: object
            properties: {}
            description: Tool to support URL context retrieval.
        UrlContextMetadata:
            type: object
            properties:
                urlMetadata:
                    type: array
                    items:
                        $ref: '#/components/schemas/UrlMetadata'
                    description: List of url context.
            description: Metadata related to url context retrieval tool.
        UrlMetadata:
            type: object
            properties:
                retrievedUrl:
                    type: string
                    description: Retrieved url by the tool.
                urlRetrievalStatus:
                    type: integer
                    description: Status of the url retrieval.
                    format: enum
            description: Context of the a single url retrieval.
        VideoMetadata:
            type: object
            properties:
                startOffset:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: Optional. The start offset of the video.
                endOffset:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: Optional. The end offset of the video.
                fps:
                    type: number
                    description: |-
                        Optional. The frame rate of the video sent to the model. If not specified,
                         the default value will be 1.0. The fps range is (0.0, 24.0].
                    format: double
            description: Metadata describes the input video content.
        VoiceConfig:
            type: object
            properties:
                prebuiltVoiceConfig:
                    allOf:
                        - $ref: '#/components/schemas/PrebuiltVoiceConfig'
                    description: The configuration for the prebuilt voice to use.
            description: The configuration for the voice to use.
    securitySchemes:
        ApiKeyAuth:
            type: apiKey
            in: header
            name: x-goog-api-key
            description: "Gemini API Key"

tags:
    - name: GenerativeService
